name: Publish Release
on:
  push:
    tags:
      - 'v*'
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Run tests
        run: make test
      -
        name: Import GPG key
        id: import_gpg
        uses: hashicorp/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
      -
        name: Build and draft the release
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --parallelism 2 --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.DUPLO_GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      -
        name: Publish the release
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.DUPLO_GITHUB_TOKEN }}
          script: |
            // List all releases.
            let releases = await github.rest.repos.listReleases({ owner: context.repo.owner, repo: context.repo.repo });
            console.log(`Found ${releases.length} releases`);

            // Identity the draft release.
            const draftRelease = releases.find((r) => r.draft && r.tag_name == '${{ env.GITHUB_REF_NAME }}');
            if (draftRelease)
              console.log(`Found draft release: ${draftRelease.tag_name} (${draftRelease.id})`);

            // Publish the draft release.
            github.rest.repos.updateRelease({ owner: context.repo.owner, repo: context.repo.repo,
                                              release_id: '${{ draftRelease.id }}', draft: false });
            console.log(`Published draft release: ${draftRelease.tag_name} (${draftRelease.id})`);
