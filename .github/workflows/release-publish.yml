name: Publish Release
on:
  push:
    tags:
      - 'v*'
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.20.0'
      -
        name: Run tests
        run: make test
        env:
          duplo_host: http://localhost:60020
          duplo_token: FAKE
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY2 }}
          passphrase: ${{ secrets.PASSPHRASE2 }}
      -
        name: Build and draft the release
        uses: goreleaser/goreleaser-action@v4
        with:
          version: v1.26.2
          args: release --parallelism 2 --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.DUPLO_TF_GITHUB_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  publish-release:
    runs-on: ubuntu-latest
    needs:
      - goreleaser
    steps:
      -
        name: Publish the release
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.DUPLO_TF_GITHUB_TOKEN }}
          script: |
            // List all releases.
            let releases = await github.rest.repos.listReleases({ owner: context.repo.owner, repo: context.repo.repo });
            console.log(`Found ${releases.data.length} releases:`);

            // Identity the draft release.
            const draftRelease = releases.data.find((r) => r.draft && r.tag_name == '${{ github.ref_name }}');
            if (! draftRelease) {
              const msg = `No draft release found: ${{ github.ref_name }}`;
              console.log(msg);
              core.setFailed(msg);
            } 

            // Publish the draft release.
            else {
              console.log(`Found draft release: ${draftRelease.tag_name} (${draftRelease.id})`);
              await github.rest.repos.updateRelease({ owner: context.repo.owner, repo: context.repo.repo,
                                                      release_id: draftRelease.id, draft: false });
              console.log(`Published draft release: ${draftRelease.tag_name} (${draftRelease.id})`);
            }
