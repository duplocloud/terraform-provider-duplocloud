---
{{ if .Name }}
# Resource: {{ .Name }}
{{ end }}

{{ if .Description }}
{{ .Description }}
{{ end }}

## Example Usage

### Provision an RDS instance using the PostgreSQL engine named dev-db in DuploCloud platform.

```terraform
# Before creating an RDS instance, you must first set up the infrastructure and tenant. Below is the resource for creating the infrastructure.
resource "duplocloud_infrastructure" "infra" {
  infra_name        = "dev"
  cloud             = 0 # AWS Cloud
  region            = "us-east-1"
  enable_k8_cluster = false
  address_prefix    = "10.13.0.0/16"
}

# Use the infrastructure name as the 'plan_id' from the 'duplocloud_infrastructure' resource while creating tenant.
resource "duplocloud_tenant" "tenant" {
 account_name = "dev"
 plan_id      = duplocloud_infrastructure.infra.infra_name
}

# Generate a random password for the RDS instance.
resource "random_password" "password" {
  length  = 16
  special = false
}

// Create an RDS instance.
resource "duplocloud_rds_instance" "dev-db" {
  tenant_id      = duplocloud_tenant.tenant.tenant_id
  name           = "dev-db"
  engine         = 1 # PostgreSQL DB engine
  engine_version = "15.2" # PostgreSQL DB engine version
  size           = "db.t3.medium" # RDS instance size/class

  master_username = "postgres"
  master_password = random_password.password.result

  encrypt_storage         = true
  backup_retention_period = 7
}
```

### Provision an RDS instance using the PostgreSQL engine named dev-db with deletion protection enabled and multi-az enabled in DuploCloud platform.

```terraform
# Ensure the 'dev' tenant is already created before creating the RDS instance.
data "duplocloud_tenant" "tenant" {
  name = "dev"
}

# Generate a random password for the RDS instance.
resource "random_password" "mypassword" {
  length  = 16
  special = false
}

resource "duplocloud_rds_instance" "dev-db" {
  tenant_id      = data.duplocloud_tenant.tenant.id
  name           = "dev-db"
  engine         = 1 # PostgreSQL DB engine
  engine_version = "15.2"
  size           = "db.t3.medium"

  deletion_protection = true
  multi_az            = true

  master_username = "postgres"
  master_password = random_password.mypassword.result

  encrypt_storage         = true
  backup_retention_period = 7
}
```

### Create an RDS instance using the Aurora-PostgreSQL engine named aurora-postgres-db with instance class db.m5.large in DuploCloud platform.

```terraform
# Ensure the 'dev' tenant is already created before creating the RDS instance.
data "duplocloud_tenant" "tenant" {
  name = "dev"
}

# Generate a random password for the RDS instance.
resource "random_password" "mypassword" {
  length  = 16
  special = false
}

resource "duplocloud_rds_instance" "aurora-postgres-db" {
  tenant_id      = data.duplocloud_tenant.tenant.id
  name           = "aurora-postgres-db"
  engine         = 9 # AuroraDB PostgreSQL engine
  engine_version = "15.2"
  size           = "db.m5.large"

  master_username = "postgres"
  master_password = random_password.mypassword.result

  encrypt_storage         = true
  backup_retention_period = 7
}
```

### Create an Aurora serverless RDS instance using the PostgreSQL engine named aurora-postgres with engine version 15.5, minimum capacity of 0.5, maximum capacity of 2, with deletion protection enabled and store the DB credentials in AWS secrets manager. Also create a read replica for this database.

```terraform
# Ensure the 'dev' tenant is already created before creating the RDS instance.
data "duplocloud_tenant" "tenant" {
  name = "dev"
}

# Generate a random password for the RDS instance.
resource "random_password" "mypassword" {
  length  = 16
  special = false
}

resource "duplocloud_rds_instance" "aurora-serverless" {
  tenant_id      = data.duplocloud_tenant.tenant.id
  name           = "aurora-postgres"
  engine         = 12 # AuroraDB serverless PostgreSQL engine
  engine_version = "15.5"
  size           = "db.serverless"

  master_username = "postgres"
  master_password = random_password.mypassword.result

  encrypt_storage         = true
  backup_retention_period = 7

  v2_scaling_configuration {
    min_capacity = 0.5
    max_capacity = 2
  }

  store_details_in_secret_manager = true
  deletion_protection             = true
}

resource "duplocloud_rds_read_replica" "read-replica" {
  tenant_id          = data.duplocloud_tenant.tenant.id
  name               = "aurora-postgres-read-replica"
  size               = "db.serverless"
  cluster_identifier = duplocloud_rds_instance.aurora-serverless.cluster_identifier
  depends_on         = [duplocloud_rds_instance.aurora-serverless]
}
```

### Provision an RDS instance using the MySQL engine named dev-db, with username mysql_user1 in DuploCloud platform.

```terraform
# Ensure the 'dev' tenant is already created before creating the RDS instance.
data "duplocloud_tenant" "tenant" {
  name = "dev"
}

# Generate a random password for the RDS instance.
resource "random_password" "mypassword" {
  length  = 16
  special = false
}

// Create an RDS instance.
resource "duplocloud_rds_instance" "dev-db" {
  tenant_id      = data.duplocloud_tenant.tenant.id
  name           = "dev-db"
  engine         = 0              # SQL DB engine
  engine_version = "8.0.32"       # MySQL DB engine version
  size           = "db.t3.medium" # RDS instance size/class

  master_username = "mysql_user1"
  master_password = random_password.mypassword.result

  encrypt_storage         = true
  backup_retention_period = 7
}
```

### Provision an RDS instance using the MySQL engine named dev-db with engine version 5.7, allocated storage 50 GB and enable IAM auth and logging for this DB in DuploCloud platform.

```terraform
# Ensure the 'dev' tenant is already created before creating the RDS instance.
data "duplocloud_tenant" "tenant" {
  name = "dev"
}

# Generate a random password for the RDS instance.
resource "random_password" "mypassword" {
  length  = 16
  special = false
}

// Create an RDS instance.
resource "duplocloud_rds_instance" "dev-db" {
  tenant_id      = data.duplocloud_tenant.tenant.id
  name           = "dev-db"
  engine         = 0              # SQL DB engine
  engine_version = "5.7.44"       # MySQL DB engine version
  size           = "db.t3.medium" # RDS instance size/class

  master_username = "mysql_user1"
  master_password = random_password.mypassword.result

  encrypt_storage         = true
  backup_retention_period = 7
  allocated_storage       = 50
  enable_iam_auth         = true
  enable_logging          = true
}
```

{{ .SchemaMarkdown | trimspace }}

## Import

Import is supported using the following syntax:

```shell
# Example: Importing an existing RDS instance
#  - *TENANT_ID* is the tenant GUID
#  - *SHORTNAME* is the short name of the database (without the duplo prefix)
#
terraform import duplocloud_rds_instance.mydb v2/subscriptions/*TENANT_ID*/RDSDBInstance/*SHORTNAME*
```
